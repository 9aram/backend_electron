<?xml version="1.0" encoding="UTF-8" ?>
<jsp:root xmlns:jsp="http://java.sun.com/JSP/Page"
	xmlns:c="http://java.sun.com/jsp/jstl/core" version="2.0">
	<jsp:directive.page contentType="text/html; charset=UTF-8"
		pageEncoding="UTF-8" />
	<jsp:directive.page extends="coreframe.http.JspxController" />
	<jsp:directive.page import="java.io.*,java.util.*" />
	<jsp:directive.page import="java.lang.*" />

	<jsp:directive.page
		import="coreframe.http.*,coreframe.data.*,coreframe.http.multipart.*" />
	<jsp:directive.page import="coreframe.service.validation.*" />
	<jsp:directive.page import="java.io.File" />
	<jsp:directive.page import="java.io.PrintWriter" />

	<jsp:directive.page import="com.oreilly.servlet.MultipartRequest" />
	<jsp:directive.page
		import="com.oreilly.servlet.multipart.DefaultFileRenamePolicy" />


	<c:set scope="request" var="viewpage.prefix" value="/curriculum1.4/" />
	<c:set scope="request" var="viewpage.postfix" value=".jsp" />

	<jsp:declaration><![CDATA[String bldPath = "/main_board/";

	protected String getDefaultMethodName() {
		return "board";
	}

	//게시판리스트
	public void board(ViewMeta view) throws IOException {

		//HttpServletRequest의 각 paramter 키/값을 DataSet 형태로 변환하여 반환한다.
		DataSet input = view.getInputDataSet();

		InteractionBean interact = new InteractionBean();
		int page = input.getText("page") == null || input.getText("page").trim().equals("") ? 1
				: Integer.parseInt(input.getText("page"));

		String keyField = input.getText("keyField").trim();
		String keyWord = input.getText("keyWord").trim();
		input.put("keyField", keyField);
		input.put("keyWord", '%' + keyWord + '%');

		input.put("sqlID", "getBoardCount");
		//output.getInt("total_count");
		DataSet output = interact.execute(bldPath + "select_board", input);

		int totalCount = Integer.parseInt(output.getText("total_count"));
		//System.out.println("페이지넘버totalCount" + totalCount);
		//System.out.println("페이지넘버BListCommandss" + input.getText("page"));
		/* int page = input.getText("page") != null ? 1 : Integer.parseInt(input.getText("page")); */
		/* int page =Integer.parseInt(input.getText("page")); */

		Paging paging = new Paging();
		paging.setPageNo(page); //get방식의 parameter값으로 반은 page변수, 현재 페이지 번호
		paging.setPageSize(10); // 한페이지에 불러낼 게시물의 개수 지정
		paging.setTotalCount(totalCount);
		paging.setKeyField(keyField);
		paging.setKeyWord(keyWord);
		page = (page - 1) * 10; //select해오는 기준을 구한다.
		int endpage = page + 10;

		input.put("page", page + 1);
		input.put("endpage", endpage);
		input.put("keyField", keyField);
		input.put("keyWord", '%' + keyWord + '%');
		input.put("sqlID", "getBoardList");
		output = interact.execute(bldPath + "select_board", input);

		//view.setAttribute("totalCount", output.getInt("total_count"));
		view.setAttribute("paging", paging);
		view.setAttribute("totalPage", paging.getTotalCount());
		view.setAttribute("startPage", paging.startPageNo);
		view.setAttribute("endPage", paging.endPageNo);
		view.setAttribute("keyWord", keyWord);
		view.setAttribute("keyField", keyField);

		view.setAttribute("boardList", output.toList());
		view.setViewName("list");
	}

	//글쓰기
	public void writeContents(ViewMeta view) throws IOException {

		DataSet input = view.getInputDataSet();

		HttpServletRequest request = view.getHttpServletRequest();

		String filePath = request.getServletContext().getRealPath("/curriculum1.4/filedir");

		int fileSize = 1024 * 1024 * 30;

		MultipartRequest multi = null;

		try {

			multi = new MultipartRequest(view.getHttpServletRequest(), filePath, fileSize, "utf-8",
					new DefaultFileRenamePolicy());

			String bTitle = multi.getParameter("bTitle");
			String bName = multi.getParameter("bName");
			String bContent = multi.getParameter("bContent");

			String bFile = multi.getFilesystemName("bFile");

			input.put("bTitle", bTitle);
			input.put("bName", bName);
			input.put("bContent", bContent);
			input.put("bFile", bFile);

			InteractionBean interact = new InteractionBean();
			DataSet output = interact.execute(bldPath + "insert_board", input);

			view.setRedirectUrl("controller.jspx");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	//글수정
	public void modifyContents(ViewMeta view) throws IOException {

		DataSet input = view.getInputDataSet();

		int bId;
		bId = Integer.parseInt(input.getText("bId"));
		//bId = input.getText("bId");
	
		String bTitle = input.getText("bTitle");
		String bName = input.getText("bName");
		String bContent = input.getText("bContent");

		System.out.println("컨트롤러에서 modifyContents 진입");
		System.out.println("컨트롤러에서 modifyContents 진입" + bId);
		System.out.println("컨트롤러에서 modifyContents 진입" + bTitle);
		System.out.println("컨트롤러에서 modifyContents 진입" + bName);
		System.out.println("컨트롤러에서 modifyContents 진입" + bContent);

		input.put("bId", bId);
		input.put("bTitle", bTitle);
		input.put("bName", bName);
		input.put("bContent", bContent);

		DataSet output = interact.execute(bldPath + "modify_board", input);

		view.setRedirectUrl("controller.jspx");

	}

	//게시물 보기
	public void contents(ViewMeta view) throws IOException {

		DataSet input = view.getInputDataSet();

		int bId;

		if (input.getText("bId") == null || input.getText("bId").trim().equals("")) {
			view.setViewName("list");
		} else {
			bId = Integer.parseInt(input.getText("bId"));
		
			input.put("sqlID", "getBoardData");
			input.put("bId", bId);
			DataSet output = interact.execute(bldPath + "select_board", input);

			view.setAttribute("bId", output.get("bId"));
			view.setAttribute("bName", output.get("bName"));
			view.setAttribute("bTitle", output.get("bTitle"));
			view.setAttribute("bContent", output.get("bContent"));
			view.setAttribute("bDate", output.get("bDate"));
			view.setAttribute("bHit", output.get("bHit"));
			view.setAttribute("bGroup", output.get("bGroup"));
			view.setAttribute("bStep", output.get("bStep"));
			view.setAttribute("bIndent", output.get("bIndent"));
			view.setAttribute("bFile", output.get("bFile"));

			view.setViewName("content_view");
		}
	}

	//답변하기 
	public void viewReplyContents(ViewMeta view) throws IOException {

		DataSet input = view.getInputDataSet();

		int bId;

		if (input.getText("bId") == null || input.getText("bId").trim().equals("")) {
			view.setViewName("list");
		} else {
			bId = Integer.parseInt(input.getText("bId"));

			input.put("sqlID", "getBoardData");
			input.put("bId", bId);
			DataSet output = interact.execute(bldPath + "select_board", input);

			view.setAttribute("bId", output.get("bId"));
			view.setAttribute("bName", output.get("bName"));
			view.setAttribute("bTitle", output.get("bTitle"));
			view.setAttribute("bContent", output.get("bContent"));
			view.setAttribute("bDate", output.get("bDate"));
			view.setAttribute("bHit", output.get("bHit"));
			view.setAttribute("bGroup", output.get("bGroup"));
			view.setAttribute("bStep", output.get("bStep"));
			view.setAttribute("bIndent", output.get("bIndent"));
			view.setAttribute("bFile", output.get("bFile"));

			view.setViewName("reply_view");
		}
	}

	//답변하기
	public void replyContents(ViewMeta view) throws IOException {

		DataSet input = view.getInputDataSet();

		HttpServletRequest request = view.getHttpServletRequest();

		String filePath = request.getServletContext().getRealPath("/curriculum1.4/filedir");

		int fileSize = 1024 * 1024 * 30;

		MultipartRequest multi = null;

		try {
		
			multi = new MultipartRequest(view.getHttpServletRequest(), filePath, fileSize, "utf-8",
					new DefaultFileRenamePolicy());

			int bId = Integer.parseInt(multi.getParameter("bId"));
			String bTitle = multi.getParameter("bTitle");
			String bName = multi.getParameter("bName");
			String bContent = multi.getParameter("bContent");
			int bGroup = Integer.parseInt(multi.getParameter("bGroup"));
			int bStep = Integer.parseInt(multi.getParameter("bStep"));
			int bIndent = Integer.parseInt(multi.getParameter("bIndent"));
			String bFile = multi.getFilesystemName("bFile");

			
			input.put("sqlID", "addReplyBoardData");
			input.put("bTitle", bTitle);
			input.put("bName", bName);
			input.put("bContent", bContent);
			input.put("bFile", bFile);
			input.put("bGroup", bGroup);
			input.put("bStep", bStep);
			input.put("bIndent", bIndent);

			InteractionBean interact = new InteractionBean();
			DataSet output = interact.execute(bldPath + "reply_board", input);

			view.setRedirectUrl("controller.jspx");

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	//글삭제
	public void deleteContents(ViewMeta view) throws IOException {

		DataSet input = view.getInputDataSet();
		int bId;
		bId = Integer.parseInt(input.getText("bId"));
		input.put("bId", bId);
		DataSet output = interact.execute(bldPath + "delete_board", input);
		view.setRedirectUrl("controller.jspx");
	}

	// 첨부파일 다운로드
	public void downloadFile(ViewMeta view) throws IOException {

		DataSet input = view.getInputDataSet();

		HttpServletRequest request = view.getHttpServletRequest();
		HttpServletResponse response = view.getHttpServletResponse();
		String bFile = new String(input.getText("bFile").getBytes("UTF-8"), "ISO-8859-1");
		String filePath = request.getServletContext().getRealPath("/curriculum1.4/filedir");
		response.setHeader("Content-Type", "application/octet-stream");
		response.setHeader("Content-Disposition", "attachment;filename=\"" + bFile + "\";");

		File file = new File(filePath + "/" + bFile);

		// 무조건 다운로드 설정

		FileInputStream fileInputStream = new FileInputStream(file);
		ServletOutputStream servletOutputStream = response.getOutputStream();

		byte b[] = new byte[1024];
		int data = 0;

		while ((data = (fileInputStream.read(b, 0, b.length))) != -1) {
			servletOutputStream.write(b, 0, data);
		}

		servletOutputStream.flush();
		servletOutputStream.close();
		fileInputStream.close();

	}

	public class Paging {
		private int pageSize; // 게시 글 수
		private int firstPageNo; // 첫 번째 페이지 번호
		private int prevPageNo; // 이전 페이지 번호
		private int startPageNo; // 시작 페이지 (페이징 네비 기준)
		private int pageNo; // 페이지 번호
		private int endPageNo; // 끝 페이지 (페이징 네비 기준)
		private int nextPageNo; // 다음 페이지 번호
		private int finalPageNo; // 마지막 페이지 번호
		private int totalCount; // 게시 글 전체 수
		String keyField;
		String keyWord;

		/**
		 * @return the pageSize
		 */
		public int getPageSize() {
			return pageSize;
		}

		/**
		 * @param pageSize the pageSize to set
		 */
		public void setPageSize(int pageSize) {
			this.pageSize = pageSize;
		}

		/**
		 * @return the firstPageNo
		 */
		public int getFirstPageNo() {
			return firstPageNo;
		}

		/**
		 * @param firstPageNo the firstPageNo to set
		 */
		public void setFirstPageNo(int firstPageNo) {
			this.firstPageNo = firstPageNo;
		}

		/**
		 * @return the prevPageNo
		 */
		public int getPrevPageNo() {
			return prevPageNo;
		}

		/**
		 * @param prevPageNo the prevPageNo to set
		 */
		public void setPrevPageNo(int prevPageNo) {
			this.prevPageNo = prevPageNo;
		}

		/**
		 * @return the startPageNo
		 */
		public int getStartPageNo() {
			return startPageNo;
		}

		/**
		 * @param startPageNo the startPageNo to set
		 */
		public void setStartPageNo(int startPageNo) {
			this.startPageNo = startPageNo;
		}

		/**
		 * @return the pageNo
		 */
		public int getPageNo() {
			return pageNo;
		}

		/**
		 * @param pageNo the pageNo to set
		 */
		public void setPageNo(int pageNo) {
			this.pageNo = pageNo;
		}

		/**
		 * @return the endPageNo
		 */
		public int getEndPageNo() {
			return endPageNo;
		}

		/**
		 * @param endPageNo the endPageNo to set
		 */
		public void setEndPageNo(int endPageNo) {
			this.endPageNo = endPageNo;
		}

		/**
		 * @return the nextPageNo
		 */
		public int getNextPageNo() {
			return nextPageNo;
		}

		/**
		 * @param nextPageNo the nextPageNo to set
		 */
		public void setNextPageNo(int nextPageNo) {
			this.nextPageNo = nextPageNo;
		}

		/**
		 * @return the finalPageNo
		 */
		public int getFinalPageNo() {
			return finalPageNo;
		}

		/**
		 * @param finalPageNo the finalPageNo to set
		 */
		public void setFinalPageNo(int finalPageNo) {
			this.finalPageNo = finalPageNo;
		}

		/**
		 * @return the totalCount
		 */
		public int getTotalCount() {
			return totalCount;
		}

		/**
		 * @param totalCount the totalCount to set
		 */
		public void setTotalCount(int totalCount) {
			this.totalCount = totalCount;
			this.makePaging();
		}

		public String getkeyField() {
			return keyField;
		}

		public void setKeyField(String keyField) {
			this.keyField = keyField;

		}

		public String getKeyWord() {
			return keyWord;
		}

		public void setKeyWord(String keyWord) {
			this.keyWord = keyWord;

		}

		/**
		 * 페이징 생성
		 */
		private void makePaging() {
			if (this.totalCount == 0)
				return; // 게시 글 전체 수가 없는 경우
			if (this.pageNo == 0)
				this.setPageNo(1); // 기본 값 설정
			if (this.pageSize == 0)
				this.setPageSize(10); // 기본 값 설정

			int finalPage = (totalCount + (pageSize - 1)) / pageSize; // 마지막 페이지
			if (this.pageNo > finalPage)
				this.setPageNo(finalPage); // 기본 값 설정

			if (this.pageNo < 0 || this.pageNo > finalPage)
				this.pageNo = 1; // 현재 페이지 유효성 체크

			boolean isNowFirst = pageNo == 1 ? true : false; // 시작 페이지 (전체)
			boolean isNowFinal = pageNo == finalPage ? true : false; // 마지막 페이지 (전체)

			int startPage = ((pageNo - 1) / 10) * 10 + 1; // 시작 페이지 (페이징 네비 기준)
			int endPage = startPage + 10 - 1; // 끝 페이지 (페이징 네비 기준)

			if (endPage > finalPage) { // [마지막 페이지 (페이징 네비 기준) > 마지막 페이지] 보다 큰 경우
				endPage = finalPage;
			}

			this.setFirstPageNo(1); // 첫 번째 페이지 번호

			if (isNowFirst) {
				this.setPrevPageNo(1); // 이전 페이지 번호
			} else {
				this.setPrevPageNo(((pageNo - 1) < 1 ? 1 : (pageNo - 1))); // 이전 페이지 번호
			}

			this.setStartPageNo(startPage); // 시작 페이지 (페이징 네비 기준)
			this.setEndPageNo(endPage); // 끝 페이지 (페이징 네비 기준)

			if (isNowFinal) {
				this.setNextPageNo(finalPage); // 다음 페이지 번호
			} else {
				this.setNextPageNo(((pageNo + 1) > finalPage ? finalPage : (pageNo + 1))); // 다음 페이지 번호
			}

			this.setFinalPageNo(finalPage); // 마지막 페이지 번호
		}

		/*@Override
		public String toString() {
		    return ToStringBuilder.reflectionToString(this, ToStringStyle.SHORT_PREFIX_STYLE);
		}*/

	}]]></jsp:declaration>
</jsp:root>